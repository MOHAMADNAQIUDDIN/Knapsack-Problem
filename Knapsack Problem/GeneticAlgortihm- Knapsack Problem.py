# -*- coding: utf-8 -*-
"""GeneticAlgorithmLATEST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r2sOuToQ0IaN65Xo6Oo4Pj2tHFJaAdKq
"""

from collections import namedtuple
from random import choices, randint, randrange, random
from typing import List, Callable, Tuple, Optional
from functools import partial



Genome = List[int]
Population = List[Genome]
FitnessFunc = Callable[[Genome], int]
PopulateFunc = Callable[[], Population]
SelectionFunc = Callable[[Population, FitnessFunc], Tuple[Genome,Genome]]
CrossoverFunc = Callable[[Genome,Genome], Tuple[Genome,Genome]]
MutationFunc = Callable[[Genome], Genome]
PrinterFunc = Callable[[Population, FitnessFunc], None]

Thing = namedtuple('Thing', ['name','value','weight'])

things = [
          Thing('Chocolate',1,40),
          Thing('Bottle',2,100),
          Thing('Fruit',3,400),
          Thing('Bread',4,450),
          Thing('Cooked Meal',5,1000),
          Thing('Camera',6,800),
          Thing('Laptop',7,2500),
          Thing('Haedphones',8,15),
          Thing('Printer',9,2700),
          Thing('Desktop Computer',10,3170),
          Thing('Hair Straightener',11,460),
          Thing('Hair Dryer',12,907),
          Thing('Blanket',13,2200),
          Thing('Pillow',14,1360),
          Thing('Vitamins',15,138),
          Thing('Supplement',16,500),
]


def generate_genome(length: int) -> Genome:
    return choices([0, 1], k=length)


def generate_population(size: int, genome_length: int) -> Population:
    return [generate_genome(genome_length) for _ in range(size)]

def fitness(genome: Genome, things: [Thing], weight_limit: int)-> int:
  if len(genome) != len(things):
    raise ValueError("Genome and Things must be of the same length")

  weight = 0
  value = 0

  for i, thing in enumerate(things):
    if genome[i] == 1:
      weight += thing.weight
      value += thing.value

      if weight > weight_limit:
        return 0

      if value>86:
        return 0

  return value


def single_point_crossover(a: Genome, b: Genome) -> Tuple[Genome, Genome]:
    if len(a) != len(b):
        raise ValueError("Genomes a and b must be of same length")

    length = len(a)
    if length < 2:
        return a, b

    p = randint(1, length - 1)
    return a[0:p] + b[p:], b[0:p] + a[p:]


def mutation(genome: Genome, num: int = 1, probability: float = 0.5) -> Genome:
    for _ in range(num):
        index = randrange(len(genome))
        genome[index] = genome[index] if random() > probability else abs(genome[index] - 1)
    return genome


def population_fitness(population: Population, fitness_func: FitnessFunc) -> int:
    return sum([fitness_func(genome) for genome in population])


def selection_pair(population: Population, fitness_func: FitnessFunc) -> Population:
    return choices(
        population=population,
        weights=[fitness_func(gene) for gene in population],
        k=2
    )


def sort_population(population: Population, fitness_func: FitnessFunc) -> Population:
    return sorted(population, key=fitness_func, reverse=True)


def genome_to_string(genome: Genome) -> str:
    return "".join(map(str, genome))

def run_evolution(
        populate_func: PopulateFunc,
        fitness_func: FitnessFunc,
        fitness_limit: int,
        selection_func: SelectionFunc = selection_pair,
        crossover_func: CrossoverFunc = single_point_crossover,
        mutation_func: MutationFunc = mutation,
        generation_limit: int = 1000,
      
       )-> Tuple[Population, int]:
    population = populate_func()

    for i in range(generation_limit):
        population = sorted(population, key=lambda genome: fitness_func(genome), reverse=True)
        if fitness_func(population[0]) >= fitness_limit:
          break

        next_generation = population[0:2]
        #next generation
        for j in range(int(len(population) / 2) - 1):
            parents = selection_func(population, fitness_func)
            offspring_a, offspring_b = crossover_func(parents[0], parents[1])
            offspring_a = mutation_func(offspring_a)
            offspring_b = mutation_func(offspring_b)
            next_generation += [offspring_a, offspring_b]

        population = next_generation

    return population, i

population, generations = run_evolution(
      populate_func=partial(
          generate_population, size=10, genome_length=len(things)
      ),
      fitness_func=partial(
          fitness, things=things, weight_limit=7000
      ),
      fitness_limit=86,
      generation_limit=100
  )



def genome_to_things(genome: Genome, things:[Thing])-> [Thing]:
    result = []
    totalweight = 0
    totalvalue = 0

    for i, thing in enumerate(things):
        if genome[i] == 1:
            result += [thing.name]
            totalweight += thing.weight
            totalvalue += thing.value

    return result, totalweight, totalvalue

print(f"Number of Generations: {generations}")
result, totalweight, totalvalue = genome_to_things(population[0], things)
print(f"Result: {result} \nTotal weight: {totalweight}g \nTotal Value: {totalvalue}")

